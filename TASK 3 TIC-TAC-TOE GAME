
#include <iostream>
#include <vector>

const char PLAYER_X = 'X';
const char PLAYER_O = 'O';
const char EMPTY = ' ';

void printBoard(const std::vector<char>& board) {
    std::cout << " " << board[0] << " | " << board[1] << " | " << board[2] << "\n";
    std::cout << "---|---|---\n";
    std::cout << " " << board[3] << " | " << board[4] << " | " << board[5] << "\n";
    std::cout << "---|---|---\n";
    std::cout << " " << board[6] << " | " << board[7] << " | " << board[8] << "\n";
}

bool isWinner(const std::vector<char>& board, char player) {
    const int winPatterns[8][3] = {
        {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, // Rows
        {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, // Columns
        {0, 4, 8}, {2, 4, 6}             // Diagonals
    };
    for (const auto& pattern : winPatterns) {
        if (board[pattern[0]] == player && board[pattern[1]] == player && board[pattern[2]] == player) {
            return true;
        }
    }
    return false;
}

bool isBoardFull(const std::vector<char>& board) {
    for (char cell : board) {
        if (cell == EMPTY) {
            return false;
        }
    }
    return true;
}

void makeMove(std::vector<char>& board, char player) {
    int move;
    while (true) {
        std::cout << "Player " << player << ", enter your move (1-9): ";
        std::cin >> move;
        move--; // Adjust for 0-based indexing
        if (move >= 0 && move < 9 && board[move] == EMPTY) {
            board[move] = player;
            break;
        } else {
            std::cout << "Invalid move, try again.\n";
        }
    }
}

void playGame() {
    std::vector<char> board(9, EMPTY);
    char currentPlayer = PLAYER_X;

    while (true) {
        printBoard(board);
        makeMove(board, currentPlayer);

        if (isWinner(board, currentPlayer)) {
            printBoard(board);
            std::cout << "Player " << currentPlayer << " wins!\n";
            break;
        } else if (isBoardFull(board)) {
            printBoard(board);
            std::cout << "It's a draw!\n";
            break;
        }

        // Switch player
        currentPlayer = (currentPlayer == PLAYER_X) ? PLAYER_O : PLAYER_X;
    }
}

int main() {
    std::cout << "Welcome to Tic-Tac-Toe!\n";
    playGame();
    return 0;
}
